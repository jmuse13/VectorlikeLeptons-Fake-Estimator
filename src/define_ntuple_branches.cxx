vll_helpers::MyReaderValue<float> generator_weight(!is_data,reader,"generatorWeight",systematic,true,true,1.0);
vll_helpers::MyReaderValue<float> VLL_weight(!is_data,reader,"VLL_weight",systematic,false,true,1.0);
vll_helpers::MyReaderValue<float> pileup_weight(!is_data,reader,"pileupWeight",systematic,true,true,1.0);
vll_helpers::MyReaderValue<float> trig_global_sf(!is_data,reader,"trigGlobalSF",systematic,true,true,1.0);
vll_helpers::MyReaderValue<unsigned int> mc_channel_number(!is_data,reader,"mcChannelNumber",systematic,false,true,0);
vll_helpers::MyReaderValue<unsigned int> runNumber(is_data,reader,"runNumber",systematic,false,true,0);
vll_helpers::MyReaderArray<double> MET(true,reader,"met",systematic,true,false);
vll_helpers::MyReaderArray<float> METsig(true,reader,"met_significance",systematic,true,false);
vll_helpers::MyReaderArray<float> el_pt(true,reader,"el_pt",systematic,true,false);
vll_helpers::MyReaderArray<float> el_eta(true,reader,"el_caloCluster_eta",systematic,false,false);
vll_helpers::MyReaderArray<float> el_phi(true,reader,"el_phi",systematic,false,false);
vll_helpers::MyReaderArray<float> el_charge(true,reader,"el_charge",systematic,false,false);
vll_helpers::MyReaderArray<char> el_likelihood(true,reader,"el_likelihood_Tight",systematic,false,false);
vll_helpers::MyReaderArray<char> el_isIsolated(true,reader,"el_isIsolated_FCLoose",systematic,true,false);
vll_helpers::MyReaderArray<float> el_effSF_reco(!is_data,reader,"el_effSF_Reco",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_PID(!is_data,reader,"el_effSF_PID_Tight",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_isol(!is_data,reader,"el_effSF_Isol_Tight_FCLoose",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_chflip(!is_data,reader,"el_effSF_Chflip_Tight_FCLoose",systematic,true,true,1.0);
vll_helpers::MyReaderArray<unsigned int> el_truthClassification(!is_data,reader,"el_truthClassification",systematic,false,false,0);
vll_helpers::MyReaderArray<float> mu_pt(true,reader,"mu_pt",systematic,true,false);
vll_helpers::MyReaderArray<float> mu_eta(true,reader,"mu_eta",systematic,false,false);
vll_helpers::MyReaderArray<float> mu_phi(true,reader,"mu_phi",systematic,false,false);
vll_helpers::MyReaderArray<float> mu_charge(true,reader,"mu_charge",systematic,false,false);
vll_helpers::MyReaderArray<char> mu_isIsolated(true,reader,"mu_isIsolated_TightTrackOnly_VarRad",systematic,true,false);
vll_helpers::MyReaderArray<float> mu_effSF_reco(!is_data,reader,"mu_effSF_Reco",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> mu_effSF_TTVA(!is_data,reader,"mu_effSF_TTVA",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> mu_effSF_isol(!is_data,reader,"mu_effSF_Isol_TightTrackOnly_VarRad",systematic,true,true,1.0);
vll_helpers::MyReaderArray<unsigned int> mu_truthClassification(!is_data,reader,"mu_truthClassification",systematic,false,false,0);
vll_helpers::MyReaderArray<char> mu_isBadMuon(true,reader,"mu_isBadMuon",systematic,true,false);
vll_helpers::MyReaderArray<float> tau_pt(true,reader,"tau_pt",systematic,true,false);
vll_helpers::MyReaderArray<float> tau_eta(true,reader,"tau_eta",systematic,true,false);
vll_helpers::MyReaderArray<float> tau_phi(true,reader,"tau_phi",systematic,true,false);
vll_helpers::MyReaderArray<float> tau_charge(true,reader,"tau_charge",systematic,true,false);
vll_helpers::MyReaderArray<char> tau_isMedium(true,reader,"tau_isMedium",systematic,true,false);
vll_helpers::MyReaderArray<float> tau_effSF_Base(!is_data,reader,"tau_effSF_Base",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> tau_effSF_Medium(!is_data,reader,"tau_effSF_Medium",systematic,true,true,1.0);
vll_helpers::MyReaderArray<float> tau_RNNJetScoreSigTrans(true,reader,"tau_RNNJetScoreSigTrans",systematic,true,false);
vll_helpers::MyReaderArray<char> tau_EleBDT(true,reader,"tau_BDTEleTight",systematic,true,false);
vll_helpers::MyReaderArray<unsigned long> tau_nTracks(true,reader,"tau_nTracks",systematic,true,false);
vll_helpers::MyReaderArray<int> tau_passEleOLR(true,reader,"tau_PassEleOLR",systematic,true,false);
vll_helpers::MyReaderArray<unsigned int> tau_truthClassification(!is_data,reader,"tau_truthClassification",systematic,true,false,0);
vll_helpers::MyReaderArray<float> tau_effSF(!is_data,reader,"tau_effSF_Medium",systematic,true,false,1.0);
vll_helpers::MyReaderArray<float> jet_pt(true,reader,"jet_pt",systematic,true,false);
vll_helpers::MyReaderArray<float> jet_eta(true,reader,"jet_eta",systematic,false,false);
vll_helpers::MyReaderArray<float> jet_phi(true,reader,"jet_phi",systematic,false,false);
vll_helpers::MyReaderArray<float> jet_m(true,reader,"jet_m",systematic,false,false);
vll_helpers::MyReaderArray<char> jet_btag(true,reader,"jet_FTag_DL1r_FixedCutBEff_77",systematic,true,false);
vll_helpers::MyReaderValue<float> jet_btag_eff(!is_data,reader,"FTagEfficiency_DL1r_FixedCutBEff_77",systematic,true,true,1.0);
std::vector<TTreeReaderValue<bool>> ee_trigs_passed;
std::vector<TTreeReaderValue<bool>> mm_trigs_passed;
std::vector<TTreeReaderValue<bool>> em_trigs_passed;
std::vector<TTreeReaderValue<bool>> singlee_trigs_passed;
std::vector<TTreeReaderValue<bool>> singlemu_trigs_passed;
std::vector<TTreeReaderValue<bool>> jet_trigs_passed;
std::vector<TTreeReaderArray<char>> e_fired_trigs;
std::vector<TTreeReaderArray<char>> mu_fired_trigs;
std::vector<TTreeReaderArray<char>> jet_fired_trigs;
std::vector<TTreeReaderValue<float>> e_prescale_trigs;
std::vector<TTreeReaderValue<float>> mu_prescale_trigs;
std::vector<TTreeReaderValue<float>> jet_prescale_trigs;
